{
  "hash": "fd959b372fd9a85737ab69569e0cde09",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Python fundamentals\njupyter: python3\n---\n\n\n# Overview\n\n* To provide an overview of **core** Python functionality and programming techniques\n* Refresh your memory of Python syntax\n* This page only covers the basics and is by no means exhaustive.\n\n# Basic variable types\n\n* **Ints**:  integers; e.g. a = 2\n* **Floats**: floating-point numbers with decimals; e.g. a = 2.0\n* **Strings**: collection of characters contained in single or double quotes; individual characters can be accessed using an index (starting at 0)\n\n::: {#c9c738f0 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=1}\n``` {.python .cell-code}\na = 2\nb = 2.0\ns = \"hello\"\nprint(s[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nh\n```\n:::\n:::\n\n\nUse the `int`, `float`, and `str` functions to convert between types\n\n::: {#3a8898ff .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=2}\n``` {.python .cell-code}\na = 2.00\nprint(int(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n# Mathematical operations\n\n| Operation | Description | Example |\n| :-: | :-: | :-: |\n| + | Addition | 5 + 3 = 8 |\n| - | Substraction | 5 - 3 = 2 |\n| * | Multiplication | 5 * 3 = 15 |\n| / | Division | 5 / 3 = 1.666...|\n| // | Floor division (round down to an integer) | 5 // 3 = 1|\n| % | Modulo (compute remainder) | 5 % 3 = 2 |\n| ** | Exponent | 5 ** 3 = 125 |\n\n# Boolean operations\n\n| Operation | Description | Example | Value |\n| :-: | :-: | :-: | :-: |\n| == | Is equal? | 1 == 2 | False |\n| != | Is not equal? | 1 != 2 | True |\n| < | Less than? | 1 < 2 | True |\n| > | Greater than? | 1 > 2 | False |\n| <= | Less than or equal to? | 1 <= 2 | True |\n| >= | Greater than or equal to? | 1 >= 2 | False |\n\n# Logical operations\n\n| Operation | Description | Example | Value |\n| :-: | :-: | :-:| :-: |\n| and | Are both true? | 1 < 2 and 3 < 2 | False |\n| or | Is one true? | 1 < 2 or 3 < 2 | True |\n| not | Negate the conditional | not(1 < 2) | False |\n\n# Data structures\n\n| Type | Example | Characteristics |\n| :-: | :-: | :-: |\n| List | L = [1, 1.0, 'one'] | Mutable, iterable, ordered |\n| Tuple | t = (1, 1.0, 'one') | Immutable, iterable, ordered |\n| Set | s = {1, 1.0, 'one'} | Mutable, iterable, unordered, unique |\n| Dictionary | d = {'a':1, 'b':2, 'c':3} | Mutable, iterable, ordered|\n\n* **Mutable**: Can be modified\n* **Immutable**: Cannot be modified\n* **Ordered**: Elements can be accessed using an index or a key\n\n# Data structures continued\n\n* Use `list`, `tuple`, and `set` functions to convert between types\n* Elements in lists and tuples can be accessed using an integer index (starting at 0)\n* Elements in dictionaries are accessed using keys\n\n::: {#f63351aa .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=3}\n``` {.python .cell-code}\n# create a list and print the first value\nL = [1, 2, 3]\nprint(L[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\n::: {#fec85fff .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=4}\n``` {.python .cell-code}\n# create a dictionary of gravitational accelerations in m/s2\ng = {'Earth': 9.8, 'Mars':3.7, 'Jupiter':25}\nprint(g['Earth'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9.8\n```\n:::\n:::\n\n\n# If statements\n\n* Used to make a decision in a program\n* Runs an indented block of code if a conditional statement is true\n\n::: {#c4c63400 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=5}\n``` {.python .cell-code}\ni = 20\n\nif i < 10:\n    print(\"Doing something because i < 10 and the code is indented\")\n    \nprint('Printing non-indented code for all values of i')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrinting non-indented code for all values of i\n```\n:::\n:::\n\n\n# If-else statements\n\n* Creates two pathways, the choice depends on whether a condition is true or false\n\n::: {#054d862b .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=6}\n``` {.python .cell-code}\ni = 20\n\nif i < 10:\n    print('Doing something because i < 10')\nelse:\n    print('Doing something else i >= 10')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDoing something else i >= 10\n```\n:::\n:::\n\n\n# If-else-elif statements\n\n* Creates multiple pathways, the choice depends on which condition is true\n\n::: {#ea644a0f .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=7}\n``` {.python .cell-code}\ni = 20\n\nif i < 10:\n    print('Doing something because i < 10')\nelif i > 10:\n    print('Doing something else because i > 10')\nelse:\n    print('Doing something different from the other two cases')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDoing something else because i > 10\n```\n:::\n:::\n\n\n# For loops\n\n* For repeating code a fixed number of times\n```python\nfor e in collection:\n    # run indented code\n```\n* The indented code is run until `e` has taken on every value in `collection` (which is an iterable object like a list or tuple)\n\n::: {#e3d79783 .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=8}\n``` {.python .cell-code}\n# print the numbers from 0 to 10\nfor i in range(11):\n    print(i, end=\" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 1 2 3 4 5 6 7 8 9 10 \n```\n:::\n:::\n\n\n::: {#86b04bac .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=9}\n``` {.python .cell-code}\n# capitalise words in a list\nL = ['red', 'blue', 'green']\nfor c in L:\n    print(c.capitalize(), end=\", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRed, Blue, Green, \n```\n:::\n:::\n\n\n# While loops\n\n* For repeating code until a condition becomes false\n```python\nwhile condition:\n    # run indented code\n```\n* While loops are useful when you don't know how many times to repeat code\n* Beware of infinite loops!\n\n::: {#fb7c3566 .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=10}\n``` {.python .cell-code}\n# compute the square numbers that are smaller than 450\nn = 1\n\nwhile n**2 < 450:\n    print(n**2, end=\", \")\n    n += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, \n```\n:::\n:::\n\n\n# Break and continue\n\n* `break` is used to terminate a loop\n* `continue` is used to skip an iteration in a loop\n\n::: {#2616b0e1 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=11}\n``` {.python .cell-code}\nfor i in range(10):\n    print(i, end = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 1 2 3 4 5 6 7 8 9 \n```\n:::\n:::\n\n\n::: {#63e199cd .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=12}\n``` {.python .cell-code}\nfor i in range(10):\n    if i == 4:\n        break\n    print(i, end = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 1 2 3 \n```\n:::\n:::\n\n\n::: {#7673c66f .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=13}\n``` {.python .cell-code}\nfor i in range(10):\n    if i == 4:\n        continue\n    print(i, end = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 1 2 3 5 6 7 8 9 \n```\n:::\n:::\n\n\n# Functions\n\n* **Functions** are mini-programs based on a collection of code that has been given a name\n* Functions are defined using the `def` keyword\n* Function inputs are called **arguments**\n* The `return` keyword is used to output data from a function\n\n::: {#1747fc9e .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=14}\n``` {.python .cell-code}\n# add two numbers a and b together\ndef my_sum(a, b):\n    c = a + b\n    return c\n\nc = my_sum(3, 6)\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n```\n:::\n:::\n\n\n# Scripts, modules, and packages\n\n* Modules are Python files (.py) that contain variables, functions, etc\n* Packages are folders (directories) that contain modules\n* Scripts are top-level Python files that import packages and modules \n* Scripts are run (e.g. in Spyder) not modules/packages\n\nA typical file structure might look like this:\n```python\nemat30008/\n|--- main.py\n|--- circle.py\n```\nwhere `main.py` is a script that imports the module `circle.py`\n\n# Importing modules and packages\n\n* The `import` keyword is used to load Python code from modules and packages\n* There are many ways to do this; see EMAT10007 notes for more details\n\n::: {#7766ebed .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=15}\n``` {.python .cell-code}\n# import the math package\nimport math\n\n# print the variable pi from the math package\nprint(math.pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.141592653589793\n```\n:::\n:::\n\n\n# Summary\n\nThese slides covered core Python functionality\n\n* Operations, data types, control flow, loops, functions, modules and packages\n\nTopics not covered but which you are expected to know:\n\n* Variable scope (local, global), keyword and default arguments, classes, file input and output\n\n",
    "supporting": [
      "python_review_files"
    ],
    "filters": [],
    "includes": {}
  }
}