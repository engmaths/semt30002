{
  "hash": "1ecf3ec20c3ce77afa7420f1c5cce833",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: NumPy, SciPy, and Matplotlib\njupyter: python3\n---\n\n\n\n# NumPy\n\n* NumPy is a Python library that enables vectors and matrices to be stored as **arrays**\n* NumPy provides very fast mathematical functions that can operate on these arrays.\n\n# Importing NumPy\n\nIt is common to import NumPy using the command\n\n::: {#7b3f8801 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n# Defining arrays\n\n* Arrays are defined using the `array` function.\n* A vector (1D array) can be created by passing a list to `array`\n\n**Example**: Create the vector $v = (1, 2, 3)$ \n\n::: {#7c61976a .cell slideshow='{\"slide_type\":\"-\"}' execution_count=2}\n``` {.python .cell-code}\nv = np.array([1, 2, 3])\nprint(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3]\n```\n:::\n:::\n\n\nA matrix (2D array) can be created by passing a nested list to `array`, where each inner list is a row of the matrix\n\n**Example**: Create the matrix\n$$\nM = \\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}\n$$\n\n::: {#43ec108d .cell execution_count=3}\n``` {.python .cell-code}\nM = np.array([ [1, 2], [3, 4] ])\nprint(M)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2]\n [3 4]]\n```\n:::\n:::\n\n\n# Accessing elements\n\n* Individual elements in a 1D array can be accessed using square brackets and a numerical index\n* Indexing NumPy arrays starts at 0\n\n::: {#3013bf23 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=4}\n``` {.python .cell-code}\n# print the second element of vector v\nprint(v[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n* Use two indices separated by a comma for 2D arrays (first index = row, second index = column)\n\n::: {#e911b3df .cell execution_count=5}\n``` {.python .cell-code}\n# print the entry in the second row, first column of M\nprint(M[1, 0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n# Accessing sequential elements\n\nA colon (:) can be used to access sequential elements in an array:\n\n::: {#fc977446 .cell execution_count=6}\n``` {.python .cell-code}\nv = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(v[:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5 6 7 8 9]\n```\n:::\n:::\n\n\nThe notation `v[a:b]` will access entries starting at index $a$ and ending at $b-1$\n\n::: {#5513f28c .cell execution_count=7}\n``` {.python .cell-code}\n# print the third to fifth entries\nprint(v[2:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3 4 5]\n```\n:::\n:::\n\n\n# Some useful functions for creating arrays\n\n* `linspace(a, b, N)` creates a 1D array with $N$ uniformly spaced entries between $a$ and $b$ (inclusive)\n* `eye(N)` creates the $N \\times N$ identity matrix\n* `ones(dims)` creates arrays filled with ones, where `dims` is a tuple of integers that describes the dimensions of the array\n* `zeros(dims)` creates arrays filled with zeros\n* `random.random(dims)` creates an array with random numbers between 0 and 1 from a uniform distribution\n\n# Operations on NumPy arrays\n\nMany mathematical operations can be performed immediately\n\n* `+` and `-`: element-by-element addition and subtraction\n* `*`: scalar multiplication or element-by-element multiplication\n* `dot(a,b)`: dot product of two 1D arrays `a` and `b`\n* `@`: matrix multiplication\n\nNumPy comes with mathematical functions that can operate on arrays (e.g. trig functions, exp, log)\n* `np.sin(x)`: applies the sin function to each element of `x`\n\n# Linear algebra with NumPy\n\nThe `linalg` module of NumPy has functions for linear algebra.  For example:\n\n* `linalg.solve(A,b)`: Solve a linear system of equations of the form $Ax = b$\n* `linalg.det(A)`: Compute determinants of $A$\n* `linalg.inv(A)`: Compute the inverse of $A$, ie $A^{-1}$\n* `linalg.eig(A)`: Compute the eigenvalues and eigenvectors of $A$\n\n# SciPy\n\nIs a Python package that contains functions for a wide range of mathematical problems\n\n* Special functions, e.g. Bessel functions\n* Solving nonlinear equations\n* Optimisation\n* Interpolation\n* Integration (including solving ODEs)\n* Linear algebra (including sparse linear algebra)\n* and more\n\nThe SciPy package is imported using the code\n\n::: {#e8a8be4e .cell slideshow='{\"slide_type\":\"-\"}' execution_count=8}\n``` {.python .cell-code}\nimport scipy\n```\n:::\n\n\nAs part of this unit, we will be solving nonlinear algebraic equations and optimisation problems\n\n* `scipy.optimize.root` solves algebraic equations\n* `scipy.optimise.minimize` minimises a scalar function with multiple variables\n\nWe will also learn about other SciPy functions that are useful for finding the numerical solution to PDEs and optimisation problems.\n\n# Matplotlib\n\n* Used for visualising data in Python (eg creating plots)\n* Works well with NumPy\n\nUsually imported using\n\n::: {#decb864b .cell execution_count=9}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n# A basic example\n\nPlot $y = \\sin(x)$ from $x = 0$ to $x = 2\\pi$\n\n::: {#83d121ee .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=10}\n``` {.python .cell-code}\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_files/figure-html/cell-11-output-1.png){width=590 height=411}\n:::\n:::\n\n\n* There are many options that can edited to make figures look nicer\n* There are also many different styles of figures (e.g. contour plots, scatter plots)\n* See https://github.com/rougier/matplotlib-tutorial for a good overview of the options\n\n::: {#9303f703 .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=11}\n``` {.python .cell-code}\n# use latex fonts and use a fontsize of 16 everywhere\nplt.rcParams.update({\"text.usetex\": True, \"font.size\": 16})\n\n# plot\nplt.plot(x, y, linewidth=2, color='black')\n\n# add labels to the axes\nplt.xlabel(r'$x$')\nplt.ylabel(r'$\\sin(x)$')\n\n# show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](numpy_files/figure-html/cell-12-output-1.png){width=619 height=441}\n:::\n:::\n\n\n# Summary\n\n* NumPy provides functionality for storing numerical data as arrays and performing operations on these\n* SciPy contains functions for solving a wide variety of mathematical problems\n* Matplotlib is for visualising data\n\n",
    "supporting": [
      "numpy_files"
    ],
    "filters": [],
    "includes": {}
  }
}