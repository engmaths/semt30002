---
title: "Scientific Computing and Optimisation"
---

This unit will bring together your previous experience of solving mathematical problems (optimisation, differential equations) and writing computer programmes using [Python](https://www.python.org/), [Matlab](https://uk.mathworks.com/products/matlab.html), or [Julia](https://julialang.org/). The aim is to provide you with a suite of tools that can be used to transform real-world problems, such as those encountered in the Mathematical and Data Modelling units and final-year projects, into problems that can be efficiently solved on a computer.

# Unit timetable 

* [Week 1: Finite differences and Euler's method](scicomp/week1.qmd)
* [Week 2: ODE boundary value problems](scicomp/week2.qmd)
* [Week 3: Diffusion equations in 1D](scicomp/week3.qmd)
* [Week 4: First-order PDEs in 1D](scicomp/week4.qmd)
* [Week 5: The 2D Poisson equation](scicomp/week5.qmd)
* **Week 6: Reading week (no sessions)**
* Week 7: Optimisation
* Week 8: Optimisation
* Week 9: Optimisation
* Week 10: Optimisation
* Week 11: Optimisation and coursework support
* Week 12: No sessions

# Teaching sessions

* Monday 1200--1300 - demo and Q&A session - MVB 1.15
* Thursday 1600--1800 - lab session -- QB 1.19 (Weeks 1 and 2 only) then MVB 1.15
* Friday 1300--1400 - drop-in (optional) - MVB 1.15


# Software

You can code in Python, Matlab, or Julia.  The choice is yours.  However, some demos and examples will only be provided in one programming language.

Before the unit begins, please ensure that you have a functioning installation of your programming language of choice.  

If you are coding in Python, then you will need the following packages:

* [SciPy and NumPy](https://scipy.org/)
* [Matplotlib](https://matplotlib.org/)
* [memory_profiler](https://pypi.org/project/memory-profiler/)
* [Pyomo](http://www.pyomo.org/)

If you are coding in Matlab, then you will need the optimisation and global optimisation toolboxes.

If you are coding in Julia, then you will need the following packages:

* [OrdinaryDiffEq.jl](https://docs.sciml.ai/OrdinaryDiffEq/stable/)
* A plotting package (e.g., [GLMakie.jl](https://docs.makie.org/) or [Plots.jl](https://docs.juliaplots.org/stable/))
* [BenchmarkTools.jl](https://juliaci.github.io/BenchmarkTools.jl/stable/)
* [JuMP.jl](https://jump.dev/JuMP.jl/stable/)
* Also see [modern Julia workflows](https://modernjuliaworkflows.org/)

In Julia these can be installed from the REPL (compilation will take a few minutes):

```julia
import Pkg
Pkg.add(["OrdinaryDiffEq", "GLMakie", "BenchmarkTools", "JuMP"])
```

# Teaching staff

* Dr Matthew Hennessy (unit director): [matthew.hennessy@bristol.ac.uk](mailto:matthew.hennessy@bristol.ac.uk)
* Prof David Barton (unit lecturer): [david.barton@bristol.ac.uk](mailto:david.barton@bristol.ac.uk)
* Mr Roussel Desmond Nzoyem (teaching assistant): [rd.nzoyemngueguin@bristol.ac.uk](mailto:rd.nzoyemngueguin@bristol.ac.uk)
